{"id":"scss/styles.scss","dependencies":[{"name":"C:/Source/Insiten/lunch-and-learn/scss/scss/_interpolation.scss","includedInParent":true,"mtime":1549299410105},{"name":"C:/Source/Insiten/lunch-and-learn/scss/scss/_maps.scss","includedInParent":true,"mtime":1549299352572},{"name":"C:/Source/Insiten/lunch-and-learn/scss/scss/_mixins.scss","includedInParent":true,"mtime":1549299161376},{"name":"C:/Source/Insiten/lunch-and-learn/scss/scss/_variables.scss","includedInParent":true,"mtime":1549299381630},{"name":"_css_loader","parent":"C:\\Source\\Insiten\\lunch-and-learn\\scss\\scss\\styles.scss","resolved":"C:\\Source\\Insiten\\lunch-and-learn\\scss\\node_modules\\parcel-bundler\\src\\builtins\\css-loader.js"},{"name":"C:\\Source\\Insiten\\lunch-and-learn\\scss\\package.json","includedInParent":true,"mtime":1549293511834}],"generated":{"css":"/*\r\n\r\nPartials are a helpful way to modularize your styles across multiple files.\r\n\r\nA partial is simply a SCSS file named with a leading underscore. You might \r\nname it something like _partial.scss. The underscore lets Sass know that the \r\nfile is only a partial file and that it should not be generated into a CSS \r\nfile. SCSS partials are used with the @import directive. It's not necessary\r\nto include the file extension.\r\n\r\n*/\n/* \r\n\r\nTalk about SCSS variables\r\n\r\n*/\n/*\r\n\r\nTalk about CSS custom properties (aka variables)\r\n\r\n*/\n:root {\n  --blue: cadetblue;\n  --pink: salmon;\n  --yellow: gold; }\n\n.my-content {\n  color: var(--pink); }\n\n/* \r\n\r\nMaps are a helpful way to keep related style values all in one place.\r\n\r\nBelow is a simplified version of a map we use the real project to keep track of all of our z-index \r\nvalues. Assuming that the map is used every time a z-index value is declared in the application, \r\nit serves as a single source of truth for all z-index values in the app.\r\n\r\n*/\n/*\r\n\r\nTo access a value in the map, you use the value \"map-get\" and then parentheses. The first value\r\nis the name of the map and the second value is the property name in that map you want to access\r\nthe value of.\r\n\r\n*/\n.my-header {\n  z-index: 800; }\n\n/*\r\n\r\nMixins allow you to make groups of CSS declarations that you want to reuse.\r\n\r\n*/\n.my-component {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 20px;\n  background: violet; }\n\n.my-other-component {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 20px;\n  background: honeydew; }\n\n.my-component {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 20px;\n  background: violet; }\n\n.my-other-component {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 20px;\n  background: violet; }\n\n/*\r\n\r\nMixins can also accept arguments!\r\n\r\n*/\n.my-component {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 20px;\n  background: violet; }\n\n.my-other-component {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 20px;\n  background: honeydew; }\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box; }\n\nbody {\n  font-family: 'Sarabun', sans-serif; }\n\nheader {\n  background: gold;\n  padding: 20px; }\n\nmain {\n  background: salmon;\n  padding: 20px; }\n\nh1 {\n  font-size: 40px; }\n\np {\n  margin: 30px 0;\n  font-size: 20px; }\n","js":"var reloadCSS = require('_css_loader');\n\nmodule.hot.dispose(reloadCSS);\nmodule.hot.accept(reloadCSS);"},"hash":"9e28f673349c74069a8e340cd5edf344","cacheData":{"env":{}}}