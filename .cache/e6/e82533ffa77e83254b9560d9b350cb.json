{"id":"scss/styles.scss","dependencies":[{"name":"C:/Source/Insiten/lunch-and-learn/scss/scss/_1-nesting.scss","includedInParent":true,"mtime":1549309877538},{"name":"C:/Source/Insiten/lunch-and-learn/scss/scss/_2-variables.scss","includedInParent":true,"mtime":1549309989909},{"name":"C:/Source/Insiten/lunch-and-learn/scss/scss/_3-maps.scss","includedInParent":true,"mtime":1549310010119},{"name":"C:/Source/Insiten/lunch-and-learn/scss/scss/_4-mixins.scss","includedInParent":true,"mtime":1549310061793},{"name":"C:/Source/Insiten/lunch-and-learn/scss/scss/_5-example.scss","includedInParent":true,"mtime":1549311875590},{"name":"_css_loader","parent":"C:\\Source\\Insiten\\lunch-and-learn\\scss\\scss\\styles.scss","resolved":"C:\\Source\\Insiten\\lunch-and-learn\\scss\\node_modules\\parcel-bundler\\src\\builtins\\css-loader.js"},{"name":"C:\\Source\\Insiten\\lunch-and-learn\\scss\\package.json","includedInParent":true,"mtime":1549293511834}],"generated":{"css":"@charset \"UTF-8\";\n/*\r\n\r\n=============\r\nPARTIALS\r\n=============\r\n\r\nPartials are a helpful way to modularize your styles across multiple files.\r\n\r\nA partial is simply a SCSS file named with a leading underscore. The underscore \r\nlets SCSS know that the  file is only a partial file and that it should not be \r\ngenerated into its own CSS file. SCSS partials are used with the @import directive. \r\nIt's not necessary to include the file extension when importing.\r\n\r\n*/\n/*\r\n\r\nSCSS is a CSS preprocessor. It's a language that's written and then transpiled into CSS before\r\nruntime. You can think of it as CSS with superpowers. Let's go through some of it's most useful abilities.\r\n\r\n=============\r\nNESTING\r\n=============\r\n\r\nIn SCSS, you can nest selectors.\r\n\r\n*/\n.my-nesting-content {\n  background: indigo; }\n\n.my-nesting-content h1 {\n  color: whitesmoke; }\n\n.my-nesting-content {\n  background: indigo; }\n  .my-nesting-content h1 {\n    color: whitesmoke; }\n\n/*\r\n\r\nWhere we capitalize on this the most in our codebase is in conjunction with our use of BEM, the CSS\r\nmethodology that we follow. The ampersand (&) in SCSS can be used to reference the parent selector\r\nof a ruleset.\r\n\r\n*/\n/* \r\n\r\n=============\r\nVARIABLES\r\n=============\r\n\r\nSCSS variables are prefixed with a dollar sign ($).\r\n\r\n*/\n/*\r\n\r\nðŸ”¥ðŸ”¥ðŸ”¥ Incoming bonus info! ðŸ‘ˆðŸ‘ˆðŸ‘ˆ\r\n\r\nCSS custom properties (aka CSS variables) are defined within a selector and then\r\nreferenced with the property keyword `var()`. Unlike SCSS variables, they can be\r\nchanged dynamically\r\n\r\n*/\n:root {\n  --blue: cadetblue;\n  --pink: salmon;\n  --yellow: gold; }\n\n@media (max-width: 500px) {\n  :root {\n    --pink: lightpink; } }\n\n/* \r\n\r\n=============\r\nMAPS\r\n=============\r\n\r\nMaps are a helpful way to keep related style values all in one place.\r\n\r\n*/\n/*\r\n\r\nTo access a value in the map, you use the value \"map-get\" and then parentheses. The first value\r\nis the name of the map and the second value is the property name in that map you want to access\r\nthe value of.\r\n\r\n*/\n/*\r\n\r\n=============\r\nMIXINS\r\n=============\r\n\r\nMixins allow you to make groups of CSS declarations that you want to reuse.\r\n\r\n*/\n/*\r\n\r\nMixins can also accept arguments!\r\n\r\n*/\n/*\r\n\r\nRefactor this code!\r\n\r\nObjectives:\r\n- utilize nesting\r\n- use at least one SCSS variable\r\n- use at least one map\r\n- use at least one mixin\r\n\r\nBONUS!\r\n- use at least one CSS variable\r\n\r\n*/\n.my-example__header {\n  position: fixed;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: indianred;\n  height: 150px;\n  padding: 20px; }\n\n.my-example__header-content {\n  color: lightsteelblue; }\n\n.my-example__panel {\n  background: lightsteelblue;\n  overflow: auto;\n  padding: 20px;\n  padding-top: calc(150px + 20px); }\n\n.my-example__panel-content {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-transform: uppercase;\n  padding: 20px;\n  color: indianred; }\n\n.my-example__panel-content:nth-child(even) {\n  color: gold; }\n\n@media screen and (min-width: 700px) {\n  .my-example__header-content,\n  .my-example__panel-content {\n    margin: 20px; } }\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box; }\n\nbody {\n  font-family: 'Sarabun', sans-serif; }\n\nh1 {\n  font-size: 40px; }\n","js":"var reloadCSS = require('_css_loader');\n\nmodule.hot.dispose(reloadCSS);\nmodule.hot.accept(reloadCSS);"},"hash":"c2bc40ca7c4eb8091cf840f55334780b","cacheData":{"env":{}}}